from typing import List
# (i = 0 j = 0 - i = 2, j = 2)
# (i = 0, j = 3 - i = 2, j = 5)
# (i = 0, j = 6 - i = 2, j = 8)

#  [["5","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]


# Пробегаемся по board, встречаем элемент и определяем, лежит ли данная ячейка в заданной области
# область1 - это 3х3 поле
# область2 - это текущая строка
# область3 - это текущий столбец


def isValidSudoku(board: List[List[str]]):
    row_stat = dict()
    col_stat = dict()
    grid_stat = dict()
    n = m = 9
    for row in range(n):
        for column in range(m):
            condition = (row // 3) * 3 + (column // 3)
            if board[row][column] != '.':
                col_stat[column] = col_stat.get(column, set())
                row_stat[row] = row_stat.get(row, set())
                grid_stat[condition] = grid_stat.get(condition, set())
                if board[row][column] in grid_stat[condition]:
                    return False
                if board[row][column] in col_stat[column] or board[row][column] in row_stat[row]:
                    return False
                col_stat[column].add(board[row][column])
                row_stat[row].add(board[row][column])
                grid_stat[condition].add(board[row][column])
    return True


# print(*isValidSudoku([["5", "3", ".", ".", "7", ".", ".", ".", "."]
#                          , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
#                          , [".", "9", "8", ".", ".", ".", ".", "6", "."]
#                          , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
#                          , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
#                          , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
#                          , [".", "6", ".", ".", ".", ".", "2", "8", "."]
#                          , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
#                          , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]), sep="\n")

# print(isValidSudoku(board=
#                      [["8", "3", ".", ".", "7", ".", ".", ".", "."]
#                          , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
#                          , [".", "9", "8", ".", ".", ".", ".", "6", "."]
#                          , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
#                          , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
#                          , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
#                          , [".", "6", ".", ".", ".", ".", "2", "8", "."]
#                          , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
#                          , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]))
